/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 2.1.8
 * XML versions: imx233:3.2.0
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN__IMX233__POWER__H__
#define __HEADERGEN__IMX233__POWER__H__

#define REGS_POWER_BASE (0x80044000)

#define REGS_POWER_VERSION "3.2.0"

/**
 * Register: HW_POWER_CTRL
 * Address: 0
 * SCT: yes
*/
#define HW_POWER_CTRL                               (*(volatile unsigned long *)(REGS_POWER_BASE + 0x0 + 0x0))
#define HW_POWER_CTRL_SET                           (*(volatile unsigned long *)(REGS_POWER_BASE + 0x0 + 0x4))
#define HW_POWER_CTRL_CLR                           (*(volatile unsigned long *)(REGS_POWER_BASE + 0x0 + 0x8))
#define HW_POWER_CTRL_TOG                           (*(volatile unsigned long *)(REGS_POWER_BASE + 0x0 + 0xc))
#define BP_POWER_CTRL_RSRVD3                        31
#define BM_POWER_CTRL_RSRVD3                        0x80000000
#define BF_POWER_CTRL_RSRVD3(v)                     (((v) << 31) & 0x80000000)
#define BP_POWER_CTRL_CLKGATE                       30
#define BM_POWER_CTRL_CLKGATE                       0x40000000
#define BF_POWER_CTRL_CLKGATE(v)                    (((v) << 30) & 0x40000000)
#define BP_POWER_CTRL_RSRVD2                        28
#define BM_POWER_CTRL_RSRVD2                        0x30000000
#define BF_POWER_CTRL_RSRVD2(v)                     (((v) << 28) & 0x30000000)
#define BP_POWER_CTRL_PSWITCH_MID_TRAN              27
#define BM_POWER_CTRL_PSWITCH_MID_TRAN              0x8000000
#define BF_POWER_CTRL_PSWITCH_MID_TRAN(v)           (((v) << 27) & 0x8000000)
#define BP_POWER_CTRL_RSRVD1                        25
#define BM_POWER_CTRL_RSRVD1                        0x6000000
#define BF_POWER_CTRL_RSRVD1(v)                     (((v) << 25) & 0x6000000)
#define BP_POWER_CTRL_DCDC4P2_BO_IRQ                24
#define BM_POWER_CTRL_DCDC4P2_BO_IRQ                0x1000000
#define BF_POWER_CTRL_DCDC4P2_BO_IRQ(v)             (((v) << 24) & 0x1000000)
#define BP_POWER_CTRL_ENIRQ_DCDC4P2_BO              23
#define BM_POWER_CTRL_ENIRQ_DCDC4P2_BO              0x800000
#define BF_POWER_CTRL_ENIRQ_DCDC4P2_BO(v)           (((v) << 23) & 0x800000)
#define BP_POWER_CTRL_VDD5V_DROOP_IRQ               22
#define BM_POWER_CTRL_VDD5V_DROOP_IRQ               0x400000
#define BF_POWER_CTRL_VDD5V_DROOP_IRQ(v)            (((v) << 22) & 0x400000)
#define BP_POWER_CTRL_ENIRQ_VDD5V_DROOP             21
#define BM_POWER_CTRL_ENIRQ_VDD5V_DROOP             0x200000
#define BF_POWER_CTRL_ENIRQ_VDD5V_DROOP(v)          (((v) << 21) & 0x200000)
#define BP_POWER_CTRL_PSWITCH_IRQ                   20
#define BM_POWER_CTRL_PSWITCH_IRQ                   0x100000
#define BF_POWER_CTRL_PSWITCH_IRQ(v)                (((v) << 20) & 0x100000)
#define BP_POWER_CTRL_PSWITCH_IRQ_SRC               19
#define BM_POWER_CTRL_PSWITCH_IRQ_SRC               0x80000
#define BF_POWER_CTRL_PSWITCH_IRQ_SRC(v)            (((v) << 19) & 0x80000)
#define BP_POWER_CTRL_POLARITY_PSWITCH              18
#define BM_POWER_CTRL_POLARITY_PSWITCH              0x40000
#define BF_POWER_CTRL_POLARITY_PSWITCH(v)           (((v) << 18) & 0x40000)
#define BP_POWER_CTRL_ENIRQ_PSWITCH                 17
#define BM_POWER_CTRL_ENIRQ_PSWITCH                 0x20000
#define BF_POWER_CTRL_ENIRQ_PSWITCH(v)              (((v) << 17) & 0x20000)
#define BP_POWER_CTRL_POLARITY_DC_OK                16
#define BM_POWER_CTRL_POLARITY_DC_OK                0x10000
#define BF_POWER_CTRL_POLARITY_DC_OK(v)             (((v) << 16) & 0x10000)
#define BP_POWER_CTRL_DC_OK_IRQ                     15
#define BM_POWER_CTRL_DC_OK_IRQ                     0x8000
#define BF_POWER_CTRL_DC_OK_IRQ(v)                  (((v) << 15) & 0x8000)
#define BP_POWER_CTRL_ENIRQ_DC_OK                   14
#define BM_POWER_CTRL_ENIRQ_DC_OK                   0x4000
#define BF_POWER_CTRL_ENIRQ_DC_OK(v)                (((v) << 14) & 0x4000)
#define BP_POWER_CTRL_BATT_BO_IRQ                   13
#define BM_POWER_CTRL_BATT_BO_IRQ                   0x2000
#define BF_POWER_CTRL_BATT_BO_IRQ(v)                (((v) << 13) & 0x2000)
#define BP_POWER_CTRL_ENIRQBATT_BO                  12
#define BM_POWER_CTRL_ENIRQBATT_BO                  0x1000
#define BF_POWER_CTRL_ENIRQBATT_BO(v)               (((v) << 12) & 0x1000)
#define BP_POWER_CTRL_VDDIO_BO_IRQ                  11
#define BM_POWER_CTRL_VDDIO_BO_IRQ                  0x800
#define BF_POWER_CTRL_VDDIO_BO_IRQ(v)               (((v) << 11) & 0x800)
#define BP_POWER_CTRL_ENIRQ_VDDIO_BO                10
#define BM_POWER_CTRL_ENIRQ_VDDIO_BO                0x400
#define BF_POWER_CTRL_ENIRQ_VDDIO_BO(v)             (((v) << 10) & 0x400)
#define BP_POWER_CTRL_VDDA_BO_IRQ                   9
#define BM_POWER_CTRL_VDDA_BO_IRQ                   0x200
#define BF_POWER_CTRL_VDDA_BO_IRQ(v)                (((v) << 9) & 0x200)
#define BP_POWER_CTRL_ENIRQ_VDDA_BO                 8
#define BM_POWER_CTRL_ENIRQ_VDDA_BO                 0x100
#define BF_POWER_CTRL_ENIRQ_VDDA_BO(v)              (((v) << 8) & 0x100)
#define BP_POWER_CTRL_VDDD_BO_IRQ                   7
#define BM_POWER_CTRL_VDDD_BO_IRQ                   0x80
#define BF_POWER_CTRL_VDDD_BO_IRQ(v)                (((v) << 7) & 0x80)
#define BP_POWER_CTRL_ENIRQ_VDDD_BO                 6
#define BM_POWER_CTRL_ENIRQ_VDDD_BO                 0x40
#define BF_POWER_CTRL_ENIRQ_VDDD_BO(v)              (((v) << 6) & 0x40)
#define BP_POWER_CTRL_POLARITY_VBUSVALID            5
#define BM_POWER_CTRL_POLARITY_VBUSVALID            0x20
#define BF_POWER_CTRL_POLARITY_VBUSVALID(v)         (((v) << 5) & 0x20)
#define BP_POWER_CTRL_VBUSVALID_IRQ                 4
#define BM_POWER_CTRL_VBUSVALID_IRQ                 0x10
#define BF_POWER_CTRL_VBUSVALID_IRQ(v)              (((v) << 4) & 0x10)
#define BP_POWER_CTRL_ENIRQ_VBUS_VALID              3
#define BM_POWER_CTRL_ENIRQ_VBUS_VALID              0x8
#define BF_POWER_CTRL_ENIRQ_VBUS_VALID(v)           (((v) << 3) & 0x8)
#define BP_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO       2
#define BM_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO       0x4
#define BF_POWER_CTRL_POLARITY_VDD5V_GT_VDDIO(v)    (((v) << 2) & 0x4)
#define BP_POWER_CTRL_VDD5V_GT_VDDIO_IRQ            1
#define BM_POWER_CTRL_VDD5V_GT_VDDIO_IRQ            0x2
#define BF_POWER_CTRL_VDD5V_GT_VDDIO_IRQ(v)         (((v) << 1) & 0x2)
#define BP_POWER_CTRL_ENIRQ_VDD5V_GT_VDDIO          0
#define BM_POWER_CTRL_ENIRQ_VDD5V_GT_VDDIO          0x1
#define BF_POWER_CTRL_ENIRQ_VDD5V_GT_VDDIO(v)       (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_5VCTRL
 * Address: 0x10
 * SCT: yes
*/
#define HW_POWER_5VCTRL                         (*(volatile unsigned long *)(REGS_POWER_BASE + 0x10 + 0x0))
#define HW_POWER_5VCTRL_SET                     (*(volatile unsigned long *)(REGS_POWER_BASE + 0x10 + 0x4))
#define HW_POWER_5VCTRL_CLR                     (*(volatile unsigned long *)(REGS_POWER_BASE + 0x10 + 0x8))
#define HW_POWER_5VCTRL_TOG                     (*(volatile unsigned long *)(REGS_POWER_BASE + 0x10 + 0xc))
#define BP_POWER_5VCTRL_RSRVD6                  30
#define BM_POWER_5VCTRL_RSRVD6                  0xc0000000
#define BF_POWER_5VCTRL_RSRVD6(v)               (((v) << 30) & 0xc0000000)
#define BP_POWER_5VCTRL_VBUSDROOP_TRSH          28
#define BM_POWER_5VCTRL_VBUSDROOP_TRSH          0x30000000
#define BF_POWER_5VCTRL_VBUSDROOP_TRSH(v)       (((v) << 28) & 0x30000000)
#define BP_POWER_5VCTRL_RSRVD5                  27
#define BM_POWER_5VCTRL_RSRVD5                  0x8000000
#define BF_POWER_5VCTRL_RSRVD5(v)               (((v) << 27) & 0x8000000)
#define BP_POWER_5VCTRL_HEADROOM_ADJ            24
#define BM_POWER_5VCTRL_HEADROOM_ADJ            0x7000000
#define BF_POWER_5VCTRL_HEADROOM_ADJ(v)         (((v) << 24) & 0x7000000)
#define BP_POWER_5VCTRL_RSRVD4                  21
#define BM_POWER_5VCTRL_RSRVD4                  0xe00000
#define BF_POWER_5VCTRL_RSRVD4(v)               (((v) << 21) & 0xe00000)
#define BP_POWER_5VCTRL_PWD_CHARGE_4P2          20
#define BM_POWER_5VCTRL_PWD_CHARGE_4P2          0x100000
#define BF_POWER_5VCTRL_PWD_CHARGE_4P2(v)       (((v) << 20) & 0x100000)
#define BP_POWER_5VCTRL_RSRVD3                  18
#define BM_POWER_5VCTRL_RSRVD3                  0xc0000
#define BF_POWER_5VCTRL_RSRVD3(v)               (((v) << 18) & 0xc0000)
#define BP_POWER_5VCTRL_CHARGE_4P2_ILIMIT       12
#define BM_POWER_5VCTRL_CHARGE_4P2_ILIMIT       0x3f000
#define BF_POWER_5VCTRL_CHARGE_4P2_ILIMIT(v)    (((v) << 12) & 0x3f000)
#define BP_POWER_5VCTRL_RSRVD2                  11
#define BM_POWER_5VCTRL_RSRVD2                  0x800
#define BF_POWER_5VCTRL_RSRVD2(v)               (((v) << 11) & 0x800)
#define BP_POWER_5VCTRL_VBUSVALID_TRSH          8
#define BM_POWER_5VCTRL_VBUSVALID_TRSH          0x700
#define BF_POWER_5VCTRL_VBUSVALID_TRSH(v)       (((v) << 8) & 0x700)
#define BP_POWER_5VCTRL_PWDN_5VBRNOUT           7
#define BM_POWER_5VCTRL_PWDN_5VBRNOUT           0x80
#define BF_POWER_5VCTRL_PWDN_5VBRNOUT(v)        (((v) << 7) & 0x80)
#define BP_POWER_5VCTRL_ENABLE_LINREG_ILIMIT    6
#define BM_POWER_5VCTRL_ENABLE_LINREG_ILIMIT    0x40
#define BF_POWER_5VCTRL_ENABLE_LINREG_ILIMIT(v) (((v) << 6) & 0x40)
#define BP_POWER_5VCTRL_DCDC_XFER               5
#define BM_POWER_5VCTRL_DCDC_XFER               0x20
#define BF_POWER_5VCTRL_DCDC_XFER(v)            (((v) << 5) & 0x20)
#define BP_POWER_5VCTRL_VBUSVALID_5VDETECT      4
#define BM_POWER_5VCTRL_VBUSVALID_5VDETECT      0x10
#define BF_POWER_5VCTRL_VBUSVALID_5VDETECT(v)   (((v) << 4) & 0x10)
#define BP_POWER_5VCTRL_VBUSVALID_TO_B          3
#define BM_POWER_5VCTRL_VBUSVALID_TO_B          0x8
#define BF_POWER_5VCTRL_VBUSVALID_TO_B(v)       (((v) << 3) & 0x8)
#define BP_POWER_5VCTRL_ILIMIT_EQ_ZERO          2
#define BM_POWER_5VCTRL_ILIMIT_EQ_ZERO          0x4
#define BF_POWER_5VCTRL_ILIMIT_EQ_ZERO(v)       (((v) << 2) & 0x4)
#define BP_POWER_5VCTRL_PWRUP_VBUS_CMPS         1
#define BM_POWER_5VCTRL_PWRUP_VBUS_CMPS         0x2
#define BF_POWER_5VCTRL_PWRUP_VBUS_CMPS(v)      (((v) << 1) & 0x2)
#define BP_POWER_5VCTRL_ENABLE_DCDC             0
#define BM_POWER_5VCTRL_ENABLE_DCDC             0x1
#define BF_POWER_5VCTRL_ENABLE_DCDC(v)          (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_MINPWR
 * Address: 0x20
 * SCT: yes
*/
#define HW_POWER_MINPWR                     (*(volatile unsigned long *)(REGS_POWER_BASE + 0x20 + 0x0))
#define HW_POWER_MINPWR_SET                 (*(volatile unsigned long *)(REGS_POWER_BASE + 0x20 + 0x4))
#define HW_POWER_MINPWR_CLR                 (*(volatile unsigned long *)(REGS_POWER_BASE + 0x20 + 0x8))
#define HW_POWER_MINPWR_TOG                 (*(volatile unsigned long *)(REGS_POWER_BASE + 0x20 + 0xc))
#define BP_POWER_MINPWR_RSRVD1              15
#define BM_POWER_MINPWR_RSRVD1              0xffff8000
#define BF_POWER_MINPWR_RSRVD1(v)           (((v) << 15) & 0xffff8000)
#define BP_POWER_MINPWR_LOWPWR_4P2          14
#define BM_POWER_MINPWR_LOWPWR_4P2          0x4000
#define BF_POWER_MINPWR_LOWPWR_4P2(v)       (((v) << 14) & 0x4000)
#define BP_POWER_MINPWR_VDAC_DUMP_CTRL      13
#define BM_POWER_MINPWR_VDAC_DUMP_CTRL      0x2000
#define BF_POWER_MINPWR_VDAC_DUMP_CTRL(v)   (((v) << 13) & 0x2000)
#define BP_POWER_MINPWR_PWD_BO              12
#define BM_POWER_MINPWR_PWD_BO              0x1000
#define BF_POWER_MINPWR_PWD_BO(v)           (((v) << 12) & 0x1000)
#define BP_POWER_MINPWR_USE_VDDXTAL_VBG     11
#define BM_POWER_MINPWR_USE_VDDXTAL_VBG     0x800
#define BF_POWER_MINPWR_USE_VDDXTAL_VBG(v)  (((v) << 11) & 0x800)
#define BP_POWER_MINPWR_PWD_ANA_CMPS        10
#define BM_POWER_MINPWR_PWD_ANA_CMPS        0x400
#define BF_POWER_MINPWR_PWD_ANA_CMPS(v)     (((v) << 10) & 0x400)
#define BP_POWER_MINPWR_ENABLE_OSC          9
#define BM_POWER_MINPWR_ENABLE_OSC          0x200
#define BF_POWER_MINPWR_ENABLE_OSC(v)       (((v) << 9) & 0x200)
#define BP_POWER_MINPWR_SELECT_OSC          8
#define BM_POWER_MINPWR_SELECT_OSC          0x100
#define BF_POWER_MINPWR_SELECT_OSC(v)       (((v) << 8) & 0x100)
#define BP_POWER_MINPWR_VBG_OFF             7
#define BM_POWER_MINPWR_VBG_OFF             0x80
#define BF_POWER_MINPWR_VBG_OFF(v)          (((v) << 7) & 0x80)
#define BP_POWER_MINPWR_DOUBLE_FETS         6
#define BM_POWER_MINPWR_DOUBLE_FETS         0x40
#define BF_POWER_MINPWR_DOUBLE_FETS(v)      (((v) << 6) & 0x40)
#define BP_POWER_MINPWR_HALF_FETS           5
#define BM_POWER_MINPWR_HALF_FETS           0x20
#define BF_POWER_MINPWR_HALF_FETS(v)        (((v) << 5) & 0x20)
#define BP_POWER_MINPWR_LESSANA_I           4
#define BM_POWER_MINPWR_LESSANA_I           0x10
#define BF_POWER_MINPWR_LESSANA_I(v)        (((v) << 4) & 0x10)
#define BP_POWER_MINPWR_PWD_XTAL24          3
#define BM_POWER_MINPWR_PWD_XTAL24          0x8
#define BF_POWER_MINPWR_PWD_XTAL24(v)       (((v) << 3) & 0x8)
#define BP_POWER_MINPWR_DC_STOPCLK          2
#define BM_POWER_MINPWR_DC_STOPCLK          0x4
#define BF_POWER_MINPWR_DC_STOPCLK(v)       (((v) << 2) & 0x4)
#define BP_POWER_MINPWR_EN_DC_PFM           1
#define BM_POWER_MINPWR_EN_DC_PFM           0x2
#define BF_POWER_MINPWR_EN_DC_PFM(v)        (((v) << 1) & 0x2)
#define BP_POWER_MINPWR_DC_HALFCLK          0
#define BM_POWER_MINPWR_DC_HALFCLK          0x1
#define BF_POWER_MINPWR_DC_HALFCLK(v)       (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_CHARGE
 * Address: 0x30
 * SCT: yes
*/
#define HW_POWER_CHARGE                             (*(volatile unsigned long *)(REGS_POWER_BASE + 0x30 + 0x0))
#define HW_POWER_CHARGE_SET                         (*(volatile unsigned long *)(REGS_POWER_BASE + 0x30 + 0x4))
#define HW_POWER_CHARGE_CLR                         (*(volatile unsigned long *)(REGS_POWER_BASE + 0x30 + 0x8))
#define HW_POWER_CHARGE_TOG                         (*(volatile unsigned long *)(REGS_POWER_BASE + 0x30 + 0xc))
#define BP_POWER_CHARGE_RSRVD4                      27
#define BM_POWER_CHARGE_RSRVD4                      0xf8000000
#define BF_POWER_CHARGE_RSRVD4(v)                   (((v) << 27) & 0xf8000000)
#define BP_POWER_CHARGE_ADJ_VOLT                    24
#define BM_POWER_CHARGE_ADJ_VOLT                    0x7000000
#define BF_POWER_CHARGE_ADJ_VOLT(v)                 (((v) << 24) & 0x7000000)
#define BP_POWER_CHARGE_RSRVD3                      23
#define BM_POWER_CHARGE_RSRVD3                      0x800000
#define BF_POWER_CHARGE_RSRVD3(v)                   (((v) << 23) & 0x800000)
#define BP_POWER_CHARGE_ENABLE_LOAD                 22
#define BM_POWER_CHARGE_ENABLE_LOAD                 0x400000
#define BF_POWER_CHARGE_ENABLE_LOAD(v)              (((v) << 22) & 0x400000)
#define BP_POWER_CHARGE_ENABLE_CHARGER_RESISTORS    21
#define BM_POWER_CHARGE_ENABLE_CHARGER_RESISTORS    0x200000
#define BF_POWER_CHARGE_ENABLE_CHARGER_RESISTORS(v) (((v) << 21) & 0x200000)
#define BP_POWER_CHARGE_ENABLE_FAULT_DETECT         20
#define BM_POWER_CHARGE_ENABLE_FAULT_DETECT         0x100000
#define BF_POWER_CHARGE_ENABLE_FAULT_DETECT(v)      (((v) << 20) & 0x100000)
#define BP_POWER_CHARGE_CHRG_STS_OFF                19
#define BM_POWER_CHARGE_CHRG_STS_OFF                0x80000
#define BF_POWER_CHARGE_CHRG_STS_OFF(v)             (((v) << 19) & 0x80000)
#define BP_POWER_CHARGE_LIION_4P1                   18
#define BM_POWER_CHARGE_LIION_4P1                   0x40000
#define BF_POWER_CHARGE_LIION_4P1(v)                (((v) << 18) & 0x40000)
#define BP_POWER_CHARGE_USE_EXTERN_R                17
#define BM_POWER_CHARGE_USE_EXTERN_R                0x20000
#define BF_POWER_CHARGE_USE_EXTERN_R(v)             (((v) << 17) & 0x20000)
#define BP_POWER_CHARGE_PWD_BATTCHRG                16
#define BM_POWER_CHARGE_PWD_BATTCHRG                0x10000
#define BF_POWER_CHARGE_PWD_BATTCHRG(v)             (((v) << 16) & 0x10000)
#define BP_POWER_CHARGE_RSRVD2                      12
#define BM_POWER_CHARGE_RSRVD2                      0xf000
#define BF_POWER_CHARGE_RSRVD2(v)                   (((v) << 12) & 0xf000)
#define BP_POWER_CHARGE_STOP_ILIMIT                 8
#define BM_POWER_CHARGE_STOP_ILIMIT                 0xf00
#define BF_POWER_CHARGE_STOP_ILIMIT(v)              (((v) << 8) & 0xf00)
#define BP_POWER_CHARGE_RSRVD1                      6
#define BM_POWER_CHARGE_RSRVD1                      0xc0
#define BF_POWER_CHARGE_RSRVD1(v)                   (((v) << 6) & 0xc0)
#define BP_POWER_CHARGE_BATTCHRG_I                  0
#define BM_POWER_CHARGE_BATTCHRG_I                  0x3f
#define BF_POWER_CHARGE_BATTCHRG_I(v)               (((v) << 0) & 0x3f)

/**
 * Register: HW_POWER_VDDDCTRL
 * Address: 0x40
 * SCT: no
*/
#define HW_POWER_VDDDCTRL                       (*(volatile unsigned long *)(REGS_POWER_BASE + 0x40))
#define BP_POWER_VDDDCTRL_ADJTN                 28
#define BM_POWER_VDDDCTRL_ADJTN                 0xf0000000
#define BF_POWER_VDDDCTRL_ADJTN(v)              (((v) << 28) & 0xf0000000)
#define BP_POWER_VDDDCTRL_RSRVD4                24
#define BM_POWER_VDDDCTRL_RSRVD4                0xf000000
#define BF_POWER_VDDDCTRL_RSRVD4(v)             (((v) << 24) & 0xf000000)
#define BP_POWER_VDDDCTRL_PWDN_BRNOUT           23
#define BM_POWER_VDDDCTRL_PWDN_BRNOUT           0x800000
#define BF_POWER_VDDDCTRL_PWDN_BRNOUT(v)        (((v) << 23) & 0x800000)
#define BP_POWER_VDDDCTRL_DISABLE_STEPPING      22
#define BM_POWER_VDDDCTRL_DISABLE_STEPPING      0x400000
#define BF_POWER_VDDDCTRL_DISABLE_STEPPING(v)   (((v) << 22) & 0x400000)
#define BP_POWER_VDDDCTRL_ENABLE_LINREG         21
#define BM_POWER_VDDDCTRL_ENABLE_LINREG         0x200000
#define BF_POWER_VDDDCTRL_ENABLE_LINREG(v)      (((v) << 21) & 0x200000)
#define BP_POWER_VDDDCTRL_DISABLE_FET           20
#define BM_POWER_VDDDCTRL_DISABLE_FET           0x100000
#define BF_POWER_VDDDCTRL_DISABLE_FET(v)        (((v) << 20) & 0x100000)
#define BP_POWER_VDDDCTRL_RSRVD3                18
#define BM_POWER_VDDDCTRL_RSRVD3                0xc0000
#define BF_POWER_VDDDCTRL_RSRVD3(v)             (((v) << 18) & 0xc0000)
#define BP_POWER_VDDDCTRL_LINREG_OFFSET         16
#define BM_POWER_VDDDCTRL_LINREG_OFFSET         0x30000
#define BF_POWER_VDDDCTRL_LINREG_OFFSET(v)      (((v) << 16) & 0x30000)
#define BP_POWER_VDDDCTRL_RSRVD2                11
#define BM_POWER_VDDDCTRL_RSRVD2                0xf800
#define BF_POWER_VDDDCTRL_RSRVD2(v)             (((v) << 11) & 0xf800)
#define BP_POWER_VDDDCTRL_BO_OFFSET             8
#define BM_POWER_VDDDCTRL_BO_OFFSET             0x700
#define BF_POWER_VDDDCTRL_BO_OFFSET(v)          (((v) << 8) & 0x700)
#define BP_POWER_VDDDCTRL_RSRVD1                5
#define BM_POWER_VDDDCTRL_RSRVD1                0xe0
#define BF_POWER_VDDDCTRL_RSRVD1(v)             (((v) << 5) & 0xe0)
#define BP_POWER_VDDDCTRL_TRG                   0
#define BM_POWER_VDDDCTRL_TRG                   0x1f
#define BF_POWER_VDDDCTRL_TRG(v)                (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_VDDACTRL
 * Address: 0x50
 * SCT: no
*/
#define HW_POWER_VDDACTRL                       (*(volatile unsigned long *)(REGS_POWER_BASE + 0x50))
#define BP_POWER_VDDACTRL_RSRVD4                20
#define BM_POWER_VDDACTRL_RSRVD4                0xfff00000
#define BF_POWER_VDDACTRL_RSRVD4(v)             (((v) << 20) & 0xfff00000)
#define BP_POWER_VDDACTRL_PWDN_BRNOUT           19
#define BM_POWER_VDDACTRL_PWDN_BRNOUT           0x80000
#define BF_POWER_VDDACTRL_PWDN_BRNOUT(v)        (((v) << 19) & 0x80000)
#define BP_POWER_VDDACTRL_DISABLE_STEPPING      18
#define BM_POWER_VDDACTRL_DISABLE_STEPPING      0x40000
#define BF_POWER_VDDACTRL_DISABLE_STEPPING(v)   (((v) << 18) & 0x40000)
#define BP_POWER_VDDACTRL_ENABLE_LINREG         17
#define BM_POWER_VDDACTRL_ENABLE_LINREG         0x20000
#define BF_POWER_VDDACTRL_ENABLE_LINREG(v)      (((v) << 17) & 0x20000)
#define BP_POWER_VDDACTRL_DISABLE_FET           16
#define BM_POWER_VDDACTRL_DISABLE_FET           0x10000
#define BF_POWER_VDDACTRL_DISABLE_FET(v)        (((v) << 16) & 0x10000)
#define BP_POWER_VDDACTRL_RSRVD3                14
#define BM_POWER_VDDACTRL_RSRVD3                0xc000
#define BF_POWER_VDDACTRL_RSRVD3(v)             (((v) << 14) & 0xc000)
#define BP_POWER_VDDACTRL_LINREG_OFFSET         12
#define BM_POWER_VDDACTRL_LINREG_OFFSET         0x3000
#define BF_POWER_VDDACTRL_LINREG_OFFSET(v)      (((v) << 12) & 0x3000)
#define BP_POWER_VDDACTRL_RSRVD2                11
#define BM_POWER_VDDACTRL_RSRVD2                0x800
#define BF_POWER_VDDACTRL_RSRVD2(v)             (((v) << 11) & 0x800)
#define BP_POWER_VDDACTRL_BO_OFFSET             8
#define BM_POWER_VDDACTRL_BO_OFFSET             0x700
#define BF_POWER_VDDACTRL_BO_OFFSET(v)          (((v) << 8) & 0x700)
#define BP_POWER_VDDACTRL_RSRVD1                5
#define BM_POWER_VDDACTRL_RSRVD1                0xe0
#define BF_POWER_VDDACTRL_RSRVD1(v)             (((v) << 5) & 0xe0)
#define BP_POWER_VDDACTRL_TRG                   0
#define BM_POWER_VDDACTRL_TRG                   0x1f
#define BF_POWER_VDDACTRL_TRG(v)                (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_VDDIOCTRL
 * Address: 0x60
 * SCT: no
*/
#define HW_POWER_VDDIOCTRL                      (*(volatile unsigned long *)(REGS_POWER_BASE + 0x60))
#define BP_POWER_VDDIOCTRL_RSRVD5               24
#define BM_POWER_VDDIOCTRL_RSRVD5               0xff000000
#define BF_POWER_VDDIOCTRL_RSRVD5(v)            (((v) << 24) & 0xff000000)
#define BP_POWER_VDDIOCTRL_ADJTN                20
#define BM_POWER_VDDIOCTRL_ADJTN                0xf00000
#define BF_POWER_VDDIOCTRL_ADJTN(v)             (((v) << 20) & 0xf00000)
#define BP_POWER_VDDIOCTRL_RSRVD4               19
#define BM_POWER_VDDIOCTRL_RSRVD4               0x80000
#define BF_POWER_VDDIOCTRL_RSRVD4(v)            (((v) << 19) & 0x80000)
#define BP_POWER_VDDIOCTRL_PWDN_BRNOUT          18
#define BM_POWER_VDDIOCTRL_PWDN_BRNOUT          0x40000
#define BF_POWER_VDDIOCTRL_PWDN_BRNOUT(v)       (((v) << 18) & 0x40000)
#define BP_POWER_VDDIOCTRL_DISABLE_STEPPING     17
#define BM_POWER_VDDIOCTRL_DISABLE_STEPPING     0x20000
#define BF_POWER_VDDIOCTRL_DISABLE_STEPPING(v)  (((v) << 17) & 0x20000)
#define BP_POWER_VDDIOCTRL_DISABLE_FET          16
#define BM_POWER_VDDIOCTRL_DISABLE_FET          0x10000
#define BF_POWER_VDDIOCTRL_DISABLE_FET(v)       (((v) << 16) & 0x10000)
#define BP_POWER_VDDIOCTRL_RSRVD3               14
#define BM_POWER_VDDIOCTRL_RSRVD3               0xc000
#define BF_POWER_VDDIOCTRL_RSRVD3(v)            (((v) << 14) & 0xc000)
#define BP_POWER_VDDIOCTRL_LINREG_OFFSET        12
#define BM_POWER_VDDIOCTRL_LINREG_OFFSET        0x3000
#define BF_POWER_VDDIOCTRL_LINREG_OFFSET(v)     (((v) << 12) & 0x3000)
#define BP_POWER_VDDIOCTRL_RSRVD2               11
#define BM_POWER_VDDIOCTRL_RSRVD2               0x800
#define BF_POWER_VDDIOCTRL_RSRVD2(v)            (((v) << 11) & 0x800)
#define BP_POWER_VDDIOCTRL_BO_OFFSET            8
#define BM_POWER_VDDIOCTRL_BO_OFFSET            0x700
#define BF_POWER_VDDIOCTRL_BO_OFFSET(v)         (((v) << 8) & 0x700)
#define BP_POWER_VDDIOCTRL_RSRVD1               5
#define BM_POWER_VDDIOCTRL_RSRVD1               0xe0
#define BF_POWER_VDDIOCTRL_RSRVD1(v)            (((v) << 5) & 0xe0)
#define BP_POWER_VDDIOCTRL_TRG                  0
#define BM_POWER_VDDIOCTRL_TRG                  0x1f
#define BF_POWER_VDDIOCTRL_TRG(v)               (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_VDDMEMCTRL
 * Address: 0x70
 * SCT: no
*/
#define HW_POWER_VDDMEMCTRL                     (*(volatile unsigned long *)(REGS_POWER_BASE + 0x70))
#define BP_POWER_VDDMEMCTRL_RSRVD2              11
#define BM_POWER_VDDMEMCTRL_RSRVD2              0xfffff800
#define BF_POWER_VDDMEMCTRL_RSRVD2(v)           (((v) << 11) & 0xfffff800)
#define BP_POWER_VDDMEMCTRL_PULLDOWN_ACTIVE     10
#define BM_POWER_VDDMEMCTRL_PULLDOWN_ACTIVE     0x400
#define BF_POWER_VDDMEMCTRL_PULLDOWN_ACTIVE(v)  (((v) << 10) & 0x400)
#define BP_POWER_VDDMEMCTRL_ENABLE_ILIMIT       9
#define BM_POWER_VDDMEMCTRL_ENABLE_ILIMIT       0x200
#define BF_POWER_VDDMEMCTRL_ENABLE_ILIMIT(v)    (((v) << 9) & 0x200)
#define BP_POWER_VDDMEMCTRL_ENABLE_LINREG       8
#define BM_POWER_VDDMEMCTRL_ENABLE_LINREG       0x100
#define BF_POWER_VDDMEMCTRL_ENABLE_LINREG(v)    (((v) << 8) & 0x100)
#define BP_POWER_VDDMEMCTRL_RSRVD1              5
#define BM_POWER_VDDMEMCTRL_RSRVD1              0xe0
#define BF_POWER_VDDMEMCTRL_RSRVD1(v)           (((v) << 5) & 0xe0)
#define BP_POWER_VDDMEMCTRL_TRG                 0
#define BM_POWER_VDDMEMCTRL_TRG                 0x1f
#define BF_POWER_VDDMEMCTRL_TRG(v)              (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_DCDC4P2
 * Address: 0x80
 * SCT: no
*/
#define HW_POWER_DCDC4P2                    (*(volatile unsigned long *)(REGS_POWER_BASE + 0x80))
#define BP_POWER_DCDC4P2_DROPOUT_CTRL       28
#define BM_POWER_DCDC4P2_DROPOUT_CTRL       0xf0000000
#define BF_POWER_DCDC4P2_DROPOUT_CTRL(v)    (((v) << 28) & 0xf0000000)
#define BP_POWER_DCDC4P2_RSRVD5             26
#define BM_POWER_DCDC4P2_RSRVD5             0xc000000
#define BF_POWER_DCDC4P2_RSRVD5(v)          (((v) << 26) & 0xc000000)
#define BP_POWER_DCDC4P2_ISTEAL_THRESH      24
#define BM_POWER_DCDC4P2_ISTEAL_THRESH      0x3000000
#define BF_POWER_DCDC4P2_ISTEAL_THRESH(v)   (((v) << 24) & 0x3000000)
#define BP_POWER_DCDC4P2_ENABLE_4P2         23
#define BM_POWER_DCDC4P2_ENABLE_4P2         0x800000
#define BF_POWER_DCDC4P2_ENABLE_4P2(v)      (((v) << 23) & 0x800000)
#define BP_POWER_DCDC4P2_ENABLE_DCDC        22
#define BM_POWER_DCDC4P2_ENABLE_DCDC        0x400000
#define BF_POWER_DCDC4P2_ENABLE_DCDC(v)     (((v) << 22) & 0x400000)
#define BP_POWER_DCDC4P2_HYST_DIR           21
#define BM_POWER_DCDC4P2_HYST_DIR           0x200000
#define BF_POWER_DCDC4P2_HYST_DIR(v)        (((v) << 21) & 0x200000)
#define BP_POWER_DCDC4P2_HYST_THRESH        20
#define BM_POWER_DCDC4P2_HYST_THRESH        0x100000
#define BF_POWER_DCDC4P2_HYST_THRESH(v)     (((v) << 20) & 0x100000)
#define BP_POWER_DCDC4P2_RSRVD3             19
#define BM_POWER_DCDC4P2_RSRVD3             0x80000
#define BF_POWER_DCDC4P2_RSRVD3(v)          (((v) << 19) & 0x80000)
#define BP_POWER_DCDC4P2_TRG                16
#define BM_POWER_DCDC4P2_TRG                0x70000
#define BF_POWER_DCDC4P2_TRG(v)             (((v) << 16) & 0x70000)
#define BP_POWER_DCDC4P2_RSRVD2             13
#define BM_POWER_DCDC4P2_RSRVD2             0xe000
#define BF_POWER_DCDC4P2_RSRVD2(v)          (((v) << 13) & 0xe000)
#define BP_POWER_DCDC4P2_BO                 8
#define BM_POWER_DCDC4P2_BO                 0x1f00
#define BF_POWER_DCDC4P2_BO(v)              (((v) << 8) & 0x1f00)
#define BP_POWER_DCDC4P2_RSRVD1             5
#define BM_POWER_DCDC4P2_RSRVD1             0xe0
#define BF_POWER_DCDC4P2_RSRVD1(v)          (((v) << 5) & 0xe0)
#define BP_POWER_DCDC4P2_CMPTRIP            0
#define BM_POWER_DCDC4P2_CMPTRIP            0x1f
#define BF_POWER_DCDC4P2_CMPTRIP(v)         (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_MISC
 * Address: 0x90
 * SCT: no
*/
#define HW_POWER_MISC                   (*(volatile unsigned long *)(REGS_POWER_BASE + 0x90))
#define BP_POWER_MISC_RSRVD2            7
#define BM_POWER_MISC_RSRVD2            0xffffff80
#define BF_POWER_MISC_RSRVD2(v)         (((v) << 7) & 0xffffff80)
#define BP_POWER_MISC_FREQSEL           4
#define BM_POWER_MISC_FREQSEL           0x70
#define BF_POWER_MISC_FREQSEL(v)        (((v) << 4) & 0x70)
#define BP_POWER_MISC_RSRVD1            3
#define BM_POWER_MISC_RSRVD1            0x8
#define BF_POWER_MISC_RSRVD1(v)         (((v) << 3) & 0x8)
#define BP_POWER_MISC_DELAY_TIMING      2
#define BM_POWER_MISC_DELAY_TIMING      0x4
#define BF_POWER_MISC_DELAY_TIMING(v)   (((v) << 2) & 0x4)
#define BP_POWER_MISC_TEST              1
#define BM_POWER_MISC_TEST              0x2
#define BF_POWER_MISC_TEST(v)           (((v) << 1) & 0x2)
#define BP_POWER_MISC_SEL_PLLCLK        0
#define BM_POWER_MISC_SEL_PLLCLK        0x1
#define BF_POWER_MISC_SEL_PLLCLK(v)     (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_DCLIMITS
 * Address: 0xa0
 * SCT: no
*/
#define HW_POWER_DCLIMITS                   (*(volatile unsigned long *)(REGS_POWER_BASE + 0xa0))
#define BP_POWER_DCLIMITS_RSRVD3            16
#define BM_POWER_DCLIMITS_RSRVD3            0xffff0000
#define BF_POWER_DCLIMITS_RSRVD3(v)         (((v) << 16) & 0xffff0000)
#define BP_POWER_DCLIMITS_RSRVD2            15
#define BM_POWER_DCLIMITS_RSRVD2            0x8000
#define BF_POWER_DCLIMITS_RSRVD2(v)         (((v) << 15) & 0x8000)
#define BP_POWER_DCLIMITS_POSLIMIT_BUCK     8
#define BM_POWER_DCLIMITS_POSLIMIT_BUCK     0x7f00
#define BF_POWER_DCLIMITS_POSLIMIT_BUCK(v)  (((v) << 8) & 0x7f00)
#define BP_POWER_DCLIMITS_RSRVD1            7
#define BM_POWER_DCLIMITS_RSRVD1            0x80
#define BF_POWER_DCLIMITS_RSRVD1(v)         (((v) << 7) & 0x80)
#define BP_POWER_DCLIMITS_NEGLIMIT          0
#define BM_POWER_DCLIMITS_NEGLIMIT          0x7f
#define BF_POWER_DCLIMITS_NEGLIMIT(v)       (((v) << 0) & 0x7f)

/**
 * Register: HW_POWER_LOOPCTRL
 * Address: 0xb0
 * SCT: yes
*/
#define HW_POWER_LOOPCTRL                   (*(volatile unsigned long *)(REGS_POWER_BASE + 0xb0 + 0x0))
#define HW_POWER_LOOPCTRL_SET               (*(volatile unsigned long *)(REGS_POWER_BASE + 0xb0 + 0x4))
#define HW_POWER_LOOPCTRL_CLR               (*(volatile unsigned long *)(REGS_POWER_BASE + 0xb0 + 0x8))
#define HW_POWER_LOOPCTRL_TOG               (*(volatile unsigned long *)(REGS_POWER_BASE + 0xb0 + 0xc))
#define BP_POWER_LOOPCTRL_RSRVD3            21
#define BM_POWER_LOOPCTRL_RSRVD3            0xffe00000
#define BF_POWER_LOOPCTRL_RSRVD3(v)         (((v) << 21) & 0xffe00000)
#define BP_POWER_LOOPCTRL_TOGGLE_DIF        20
#define BM_POWER_LOOPCTRL_TOGGLE_DIF        0x100000
#define BF_POWER_LOOPCTRL_TOGGLE_DIF(v)     (((v) << 20) & 0x100000)
#define BP_POWER_LOOPCTRL_HYST_SIGN         19
#define BM_POWER_LOOPCTRL_HYST_SIGN         0x80000
#define BF_POWER_LOOPCTRL_HYST_SIGN(v)      (((v) << 19) & 0x80000)
#define BP_POWER_LOOPCTRL_EN_CM_HYST        18
#define BM_POWER_LOOPCTRL_EN_CM_HYST        0x40000
#define BF_POWER_LOOPCTRL_EN_CM_HYST(v)     (((v) << 18) & 0x40000)
#define BP_POWER_LOOPCTRL_EN_DF_HYST        17
#define BM_POWER_LOOPCTRL_EN_DF_HYST        0x20000
#define BF_POWER_LOOPCTRL_EN_DF_HYST(v)     (((v) << 17) & 0x20000)
#define BP_POWER_LOOPCTRL_CM_HYST_THRESH    16
#define BM_POWER_LOOPCTRL_CM_HYST_THRESH    0x10000
#define BF_POWER_LOOPCTRL_CM_HYST_THRESH(v) (((v) << 16) & 0x10000)
#define BP_POWER_LOOPCTRL_DF_HYST_THRESH    15
#define BM_POWER_LOOPCTRL_DF_HYST_THRESH    0x8000
#define BF_POWER_LOOPCTRL_DF_HYST_THRESH(v) (((v) << 15) & 0x8000)
#define BP_POWER_LOOPCTRL_RCSCALE_THRESH    14
#define BM_POWER_LOOPCTRL_RCSCALE_THRESH    0x4000
#define BF_POWER_LOOPCTRL_RCSCALE_THRESH(v) (((v) << 14) & 0x4000)
#define BP_POWER_LOOPCTRL_EN_RCSCALE        12
#define BM_POWER_LOOPCTRL_EN_RCSCALE        0x3000
#define BF_POWER_LOOPCTRL_EN_RCSCALE(v)     (((v) << 12) & 0x3000)
#define BP_POWER_LOOPCTRL_RSRVD2            11
#define BM_POWER_LOOPCTRL_RSRVD2            0x800
#define BF_POWER_LOOPCTRL_RSRVD2(v)         (((v) << 11) & 0x800)
#define BP_POWER_LOOPCTRL_DC_FF             8
#define BM_POWER_LOOPCTRL_DC_FF             0x700
#define BF_POWER_LOOPCTRL_DC_FF(v)          (((v) << 8) & 0x700)
#define BP_POWER_LOOPCTRL_DC_R              4
#define BM_POWER_LOOPCTRL_DC_R              0xf0
#define BF_POWER_LOOPCTRL_DC_R(v)           (((v) << 4) & 0xf0)
#define BP_POWER_LOOPCTRL_RSRVD1            2
#define BM_POWER_LOOPCTRL_RSRVD1            0xc
#define BF_POWER_LOOPCTRL_RSRVD1(v)         (((v) << 2) & 0xc)
#define BP_POWER_LOOPCTRL_DC_C              0
#define BM_POWER_LOOPCTRL_DC_C              0x3
#define BF_POWER_LOOPCTRL_DC_C(v)           (((v) << 0) & 0x3)

/**
 * Register: HW_POWER_STS
 * Address: 0xc0
 * SCT: no
*/
#define HW_POWER_STS                        (*(volatile unsigned long *)(REGS_POWER_BASE + 0xc0))
#define BP_POWER_STS_RSRVD3                 30
#define BM_POWER_STS_RSRVD3                 0xc0000000
#define BF_POWER_STS_RSRVD3(v)              (((v) << 30) & 0xc0000000)
#define BP_POWER_STS_PWRUP_SOURCE           24
#define BM_POWER_STS_PWRUP_SOURCE           0x3f000000
#define BF_POWER_STS_PWRUP_SOURCE(v)        (((v) << 24) & 0x3f000000)
#define BP_POWER_STS_RSRVD2                 22
#define BM_POWER_STS_RSRVD2                 0xc00000
#define BF_POWER_STS_RSRVD2(v)              (((v) << 22) & 0xc00000)
#define BP_POWER_STS_PSWITCH                20
#define BM_POWER_STS_PSWITCH                0x300000
#define BF_POWER_STS_PSWITCH(v)             (((v) << 20) & 0x300000)
#define BP_POWER_STS_RSRVD1                 18
#define BM_POWER_STS_RSRVD1                 0xc0000
#define BF_POWER_STS_RSRVD1(v)              (((v) << 18) & 0xc0000)
#define BP_POWER_STS_AVALID_STATUS          17
#define BM_POWER_STS_AVALID_STATUS          0x20000
#define BF_POWER_STS_AVALID_STATUS(v)       (((v) << 17) & 0x20000)
#define BP_POWER_STS_BVALID_STATUS          16
#define BM_POWER_STS_BVALID_STATUS          0x10000
#define BF_POWER_STS_BVALID_STATUS(v)       (((v) << 16) & 0x10000)
#define BP_POWER_STS_VBUSVALID_STATUS       15
#define BM_POWER_STS_VBUSVALID_STATUS       0x8000
#define BF_POWER_STS_VBUSVALID_STATUS(v)    (((v) << 15) & 0x8000)
#define BP_POWER_STS_SESSEND_STATUS         14
#define BM_POWER_STS_SESSEND_STATUS         0x4000
#define BF_POWER_STS_SESSEND_STATUS(v)      (((v) << 14) & 0x4000)
#define BP_POWER_STS_BATT_BO                13
#define BM_POWER_STS_BATT_BO                0x2000
#define BF_POWER_STS_BATT_BO(v)             (((v) << 13) & 0x2000)
#define BP_POWER_STS_VDD5V_FAULT            12
#define BM_POWER_STS_VDD5V_FAULT            0x1000
#define BF_POWER_STS_VDD5V_FAULT(v)         (((v) << 12) & 0x1000)
#define BP_POWER_STS_CHRGSTS                11
#define BM_POWER_STS_CHRGSTS                0x800
#define BF_POWER_STS_CHRGSTS(v)             (((v) << 11) & 0x800)
#define BP_POWER_STS_DCDC_4P2_BO            10
#define BM_POWER_STS_DCDC_4P2_BO            0x400
#define BF_POWER_STS_DCDC_4P2_BO(v)         (((v) << 10) & 0x400)
#define BP_POWER_STS_DC_OK                  9
#define BM_POWER_STS_DC_OK                  0x200
#define BF_POWER_STS_DC_OK(v)               (((v) << 9) & 0x200)
#define BP_POWER_STS_VDDIO_BO               8
#define BM_POWER_STS_VDDIO_BO               0x100
#define BF_POWER_STS_VDDIO_BO(v)            (((v) << 8) & 0x100)
#define BP_POWER_STS_VDDA_BO                7
#define BM_POWER_STS_VDDA_BO                0x80
#define BF_POWER_STS_VDDA_BO(v)             (((v) << 7) & 0x80)
#define BP_POWER_STS_VDDD_BO                6
#define BM_POWER_STS_VDDD_BO                0x40
#define BF_POWER_STS_VDDD_BO(v)             (((v) << 6) & 0x40)
#define BP_POWER_STS_VDD5V_GT_VDDIO         5
#define BM_POWER_STS_VDD5V_GT_VDDIO         0x20
#define BF_POWER_STS_VDD5V_GT_VDDIO(v)      (((v) << 5) & 0x20)
#define BP_POWER_STS_VDD5V_DROOP            4
#define BM_POWER_STS_VDD5V_DROOP            0x10
#define BF_POWER_STS_VDD5V_DROOP(v)         (((v) << 4) & 0x10)
#define BP_POWER_STS_AVALID                 3
#define BM_POWER_STS_AVALID                 0x8
#define BF_POWER_STS_AVALID(v)              (((v) << 3) & 0x8)
#define BP_POWER_STS_BVALID                 2
#define BM_POWER_STS_BVALID                 0x4
#define BF_POWER_STS_BVALID(v)              (((v) << 2) & 0x4)
#define BP_POWER_STS_VBUSVALID              1
#define BM_POWER_STS_VBUSVALID              0x2
#define BF_POWER_STS_VBUSVALID(v)           (((v) << 1) & 0x2)
#define BP_POWER_STS_SESSEND                0
#define BM_POWER_STS_SESSEND                0x1
#define BF_POWER_STS_SESSEND(v)             (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_SPEED
 * Address: 0xd0
 * SCT: yes
*/
#define HW_POWER_SPEED              (*(volatile unsigned long *)(REGS_POWER_BASE + 0xd0 + 0x0))
#define HW_POWER_SPEED_SET          (*(volatile unsigned long *)(REGS_POWER_BASE + 0xd0 + 0x4))
#define HW_POWER_SPEED_CLR          (*(volatile unsigned long *)(REGS_POWER_BASE + 0xd0 + 0x8))
#define HW_POWER_SPEED_TOG          (*(volatile unsigned long *)(REGS_POWER_BASE + 0xd0 + 0xc))
#define BP_POWER_SPEED_RSRVD1       24
#define BM_POWER_SPEED_RSRVD1       0xff000000
#define BF_POWER_SPEED_RSRVD1(v)    (((v) << 24) & 0xff000000)
#define BP_POWER_SPEED_STATUS       16
#define BM_POWER_SPEED_STATUS       0xff0000
#define BF_POWER_SPEED_STATUS(v)    (((v) << 16) & 0xff0000)
#define BP_POWER_SPEED_RSRVD0       2
#define BM_POWER_SPEED_RSRVD0       0xfffc
#define BF_POWER_SPEED_RSRVD0(v)    (((v) << 2) & 0xfffc)
#define BP_POWER_SPEED_CTRL         0
#define BM_POWER_SPEED_CTRL         0x3
#define BF_POWER_SPEED_CTRL(v)      (((v) << 0) & 0x3)

/**
 * Register: HW_POWER_BATTMONITOR
 * Address: 0xe0
 * SCT: no
*/
#define HW_POWER_BATTMONITOR                    (*(volatile unsigned long *)(REGS_POWER_BASE + 0xe0))
#define BP_POWER_BATTMONITOR_RSRVD3             26
#define BM_POWER_BATTMONITOR_RSRVD3             0xfc000000
#define BF_POWER_BATTMONITOR_RSRVD3(v)          (((v) << 26) & 0xfc000000)
#define BP_POWER_BATTMONITOR_BATT_VAL           16
#define BM_POWER_BATTMONITOR_BATT_VAL           0x3ff0000
#define BF_POWER_BATTMONITOR_BATT_VAL(v)        (((v) << 16) & 0x3ff0000)
#define BP_POWER_BATTMONITOR_RSRVD2             11
#define BM_POWER_BATTMONITOR_RSRVD2             0xf800
#define BF_POWER_BATTMONITOR_RSRVD2(v)          (((v) << 11) & 0xf800)
#define BP_POWER_BATTMONITOR_EN_BATADJ          10
#define BM_POWER_BATTMONITOR_EN_BATADJ          0x400
#define BF_POWER_BATTMONITOR_EN_BATADJ(v)       (((v) << 10) & 0x400)
#define BP_POWER_BATTMONITOR_PWDN_BATTBRNOUT    9
#define BM_POWER_BATTMONITOR_PWDN_BATTBRNOUT    0x200
#define BF_POWER_BATTMONITOR_PWDN_BATTBRNOUT(v) (((v) << 9) & 0x200)
#define BP_POWER_BATTMONITOR_BRWNOUT_PWD        8
#define BM_POWER_BATTMONITOR_BRWNOUT_PWD        0x100
#define BF_POWER_BATTMONITOR_BRWNOUT_PWD(v)     (((v) << 8) & 0x100)
#define BP_POWER_BATTMONITOR_RSRVD1             5
#define BM_POWER_BATTMONITOR_RSRVD1             0xe0
#define BF_POWER_BATTMONITOR_RSRVD1(v)          (((v) << 5) & 0xe0)
#define BP_POWER_BATTMONITOR_BRWNOUT_LVL        0
#define BM_POWER_BATTMONITOR_BRWNOUT_LVL        0x1f
#define BF_POWER_BATTMONITOR_BRWNOUT_LVL(v)     (((v) << 0) & 0x1f)

/**
 * Register: HW_POWER_RESET
 * Address: 0x100
 * SCT: yes
*/
#define HW_POWER_RESET              (*(volatile unsigned long *)(REGS_POWER_BASE + 0x100 + 0x0))
#define HW_POWER_RESET_SET          (*(volatile unsigned long *)(REGS_POWER_BASE + 0x100 + 0x4))
#define HW_POWER_RESET_CLR          (*(volatile unsigned long *)(REGS_POWER_BASE + 0x100 + 0x8))
#define HW_POWER_RESET_TOG          (*(volatile unsigned long *)(REGS_POWER_BASE + 0x100 + 0xc))
#define BP_POWER_RESET_UNLOCK       16
#define BM_POWER_RESET_UNLOCK       0xffff0000
#define BV_POWER_RESET_UNLOCK__KEY  0x3e77
#define BF_POWER_RESET_UNLOCK(v)    (((v) << 16) & 0xffff0000)
#define BF_POWER_RESET_UNLOCK_V(v)  ((BV_POWER_RESET_UNLOCK__##v << 16) & 0xffff0000)
#define BP_POWER_RESET_RSRVD1       2
#define BM_POWER_RESET_RSRVD1       0xfffc
#define BF_POWER_RESET_RSRVD1(v)    (((v) << 2) & 0xfffc)
#define BP_POWER_RESET_PWD_OFF      1
#define BM_POWER_RESET_PWD_OFF      0x2
#define BF_POWER_RESET_PWD_OFF(v)   (((v) << 1) & 0x2)
#define BP_POWER_RESET_PWD          0
#define BM_POWER_RESET_PWD          0x1
#define BF_POWER_RESET_PWD(v)       (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_DEBUG
 * Address: 0x110
 * SCT: yes
*/
#define HW_POWER_DEBUG                      (*(volatile unsigned long *)(REGS_POWER_BASE + 0x110 + 0x0))
#define HW_POWER_DEBUG_SET                  (*(volatile unsigned long *)(REGS_POWER_BASE + 0x110 + 0x4))
#define HW_POWER_DEBUG_CLR                  (*(volatile unsigned long *)(REGS_POWER_BASE + 0x110 + 0x8))
#define HW_POWER_DEBUG_TOG                  (*(volatile unsigned long *)(REGS_POWER_BASE + 0x110 + 0xc))
#define BP_POWER_DEBUG_RSRVD0               4
#define BM_POWER_DEBUG_RSRVD0               0xfffffff0
#define BF_POWER_DEBUG_RSRVD0(v)            (((v) << 4) & 0xfffffff0)
#define BP_POWER_DEBUG_VBUSVALIDPIOLOCK     3
#define BM_POWER_DEBUG_VBUSVALIDPIOLOCK     0x8
#define BF_POWER_DEBUG_VBUSVALIDPIOLOCK(v)  (((v) << 3) & 0x8)
#define BP_POWER_DEBUG_AVALIDPIOLOCK        2
#define BM_POWER_DEBUG_AVALIDPIOLOCK        0x4
#define BF_POWER_DEBUG_AVALIDPIOLOCK(v)     (((v) << 2) & 0x4)
#define BP_POWER_DEBUG_BVALIDPIOLOCK        1
#define BM_POWER_DEBUG_BVALIDPIOLOCK        0x2
#define BF_POWER_DEBUG_BVALIDPIOLOCK(v)     (((v) << 1) & 0x2)
#define BP_POWER_DEBUG_SESSENDPIOLOCK       0
#define BM_POWER_DEBUG_SESSENDPIOLOCK       0x1
#define BF_POWER_DEBUG_SESSENDPIOLOCK(v)    (((v) << 0) & 0x1)

/**
 * Register: HW_POWER_SPECIAL
 * Address: 0x120
 * SCT: yes
*/
#define HW_POWER_SPECIAL            (*(volatile unsigned long *)(REGS_POWER_BASE + 0x120 + 0x0))
#define HW_POWER_SPECIAL_SET        (*(volatile unsigned long *)(REGS_POWER_BASE + 0x120 + 0x4))
#define HW_POWER_SPECIAL_CLR        (*(volatile unsigned long *)(REGS_POWER_BASE + 0x120 + 0x8))
#define HW_POWER_SPECIAL_TOG        (*(volatile unsigned long *)(REGS_POWER_BASE + 0x120 + 0xc))
#define BP_POWER_SPECIAL_TEST       0
#define BM_POWER_SPECIAL_TEST       0xffffffff
#define BF_POWER_SPECIAL_TEST(v)    (((v) << 0) & 0xffffffff)

/**
 * Register: HW_POWER_VERSION
 * Address: 0x130
 * SCT: no
*/
#define HW_POWER_VERSION            (*(volatile unsigned long *)(REGS_POWER_BASE + 0x130))
#define BP_POWER_VERSION_MAJOR      24
#define BM_POWER_VERSION_MAJOR      0xff000000
#define BF_POWER_VERSION_MAJOR(v)   (((v) << 24) & 0xff000000)
#define BP_POWER_VERSION_MINOR      16
#define BM_POWER_VERSION_MINOR      0xff0000
#define BF_POWER_VERSION_MINOR(v)   (((v) << 16) & 0xff0000)
#define BP_POWER_VERSION_STEP       0
#define BM_POWER_VERSION_STEP       0xffff
#define BF_POWER_VERSION_STEP(v)    (((v) << 0) & 0xffff)

#endif /* __HEADERGEN__IMX233__POWER__H__ */
